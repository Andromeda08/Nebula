#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "rt_common.glsl"

layout(binding = 0, set = 0)          uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba32f) uniform image2D output_image;
layout(binding = 2, set = 0)          uniform Camera { CameraData camera; };

layout(location = 0) rayPayloadEXT RTPayload payload;

void traceRay(RayDescription ray) {
    traceRayEXT(tlas, ray.ray_flags, 0xff, 0, 0, 0, ray.origin.xyz, ray.t_min, ray.direction.xyz, ray.t_max, 0);
}

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = uv * 2.0 - 1.0;

    mat4 proj_inverse = camera.proj_inverse;
    proj_inverse[1][1] *= -1.0f;

    vec4 target     = proj_inverse * vec4(d.x, d.y, 1, 1);

    vec4 origin     = camera.view_inverse * vec4(0, 0, 0, 1);
    vec4 direction  = camera.view_inverse * vec4(normalize(target.xyz), 0);
    float t_min     = 0.001;
    float t_max     = 10000.0;
    uint  ray_flags = gl_RayFlagsOpaqueEXT;

    // Initial payload
    payload.hit_value     = vec3(0.0);
    payload.ray_origin    = origin.xyz;
    payload.ray_direction = direction.xyz;
    payload.attenuation   = vec3(1.0);
    payload.depth         = 0;
    payload.done          = 0;

    vec3 color = vec3(0.0);
    int  max_d = 2;

    for (;;)
    {
        traceRayEXT(tlas, ray_flags, 0xff, 0, 0, 0,
                    origin.xyz, t_min, direction.xyz, t_max,
                    0);

        color += payload.hit_value * payload.attenuation;
        payload.depth++;

        if(payload.done == 1 || payload.depth >= max_d) break;

        origin        = vec4(payload.ray_origin, 1.0);
        direction     = vec4(payload.ray_direction, 0.0);
        payload.done = 1;
    }

    imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}